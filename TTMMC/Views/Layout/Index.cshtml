@model IndexLayoutModel
@{
    ViewData["Title"] = "Lavorazioni";
}
<h2>Lavorazioni</h2>
<div class="content_page margin_bottom">
    <div style="margin-bottom: 15px; text-align: right;">
        <label for="searchBar" style="width: 60px;">Cerca:</label>
        <input type="text" id="txtSearch" value="" style="margin: 0 !important; width: 200px;" placeholder="Codice, Cliente, Stampo" onkeyup="filterSearch(event)" autocomplete="off" />
    </div>
    <table class="table">
        <tr>
            <td style="font-weight:bold; width:175px;">Numero</td>
            <td style="font-weight:bold; width:55px;">Stato</td>
            <td style="font-weight:bold; width:110px;">Data</td>
            <td style="font-weight:bold; width:120px;">Macchina</td>
            <td style="font-weight:bold; width:100px;">Metri</td>
            <td style="font-weight:bold; width:100px;">Quantità</td>
            <td style="font-weight:bold; width:65px;">Logs</td>
            <td style="font-weight:bold; width:175px;">Azioni</td>
        </tr>
        @foreach (var l in Model.Layouts)
        {
            <tr id="@l.LayoutNumber" style="font-size: 14px;">
                <td style="font-weight:bold; vertical-align: middle; padding-left:20px;">@l.LayoutNumber</td>
                <td style="text-align:center; vertical-align: middle;">
                    <span id="l_@l.LayoutNumber" class="led @Enum.GetName(typeof(Status), l.Status)" title="@l.Status" style="top: 2px;position: relative;"></span>
                </td>
                <td style="vertical-align: middle;">@l.StartTimestamp.ToString("dd/MM/yyyy")</td>
                <td style="vertical-align: middle;"><a asp-if="Model.Machines.Select(m => m.Id).Contains(l.Machine)" asp-action="Details" asp-controller="Machine" asp-route-id="@l.Machine">@Model.Machines.FirstOrDefault(m => m.Id == l.Machine).ReferenceName.ToString()</a><label asp-if="@(!Model.Machines.Select(m => m.Id).Contains(l.Machine))" style="font-size:11px">Macchina non trovata</label></td>
                <td></td>
                <td></td>
                <td style="vertical-align: middle; text-align:center; font-weight:bold;">
                    <span id="c_@l.LayoutNumber">@((l.LayoutActRecords)?.Count.ToString() ?? "0")</span>
                </td>
                <td class="buttons" style="vertical-align: middle; text-align: right; padding-right:20px;">
                    <a asp-if="@(l.Status == Status.Finished || l.Status == Status.Stopped)" asp-action="Report" asp-controller="Layout" asp-route-id="@l.Id" class="reportButton" target="_blank" style="@((l.Status == Status.Finished || l.Status == Status.Stopped) ? "" : "display:none;")">REPORT</a>
                    <a asp-if="@(l.Status == Status.Waiting)" asp-action="Start" asp-controller="Layout" asp-route-id="@l.Id" class="confirmDialog startButton" data-msg="Confermi di voler avviare la disposizione N. @l.LayoutNumber ?" data-title="Conferma Avvio" title="Avvia la lavorazione">AVVIA</a>
                    <a asp-if="@(l.Status == Status.Recording)" asp-action="Stop" asp-controller="Layout" asp-route-id="@l.Id" class="confirmDialog stopButton" data-msg="Confermi di voler interrompere la disposizione N. @l.LayoutNumber ?" data-title="Conferma Arresto" title="Ferma la lavorazione">FERMA</a>
                </td>
            </tr>
        }
        <tr asp-if="@(Model.Layouts.Count == 0)">
            <td colspan="8" style="text-align:center;">Nessuna Lavorazione presente.</td>
        </tr>
    </table>
</div>

@section Scripts{
    <script class="inject-json" data-name="layouts" type="application/json">
        @Html.Raw(JsonConvert.SerializeObject(Model.Layouts))
    </script>
    <script type="text/javascript">

        var timer;
        var TimerVal = 2000;
        $(document).ready(function () {
            recBlink();
            timer = setInterval(updateLogs, TimerVal);
        });

        function updateLogs() {
            $.getJSON("/Api/RealtimeLayouts").done(function (data) {
                $.each(data, function (bc, it) {
                    $("#l_" + bc).removeAttr("class");
                    $("#l_" + bc).attr("class", "led " + it.status);
                    $("#l_" + bc).attr("title", it.status);
                    $("#c_" + bc).html(it.logs);
                    if (it.status == "@Enum.GetName(typeof(Status), Status.Finished)") {
                        $("#" + bc + " .stopButton").remove();
                        $("#" + bc + " .reportButton").css("display", "inline-block");
                    }
                });
            }).fail(function (data) {

            });
        }

        function recBlink() {
            setTimeout(function () {
                var op = $(".Recording").css("opacity");
                if (op == "0")
                    $(".Recording").css("opacity", "1");
                else
                    $(".Recording").css("opacity", "0");
                recBlink();
            }, 1000);
        }

        function filterSearch(e) {
            var val = e.currentTarget.value;
            var words = val.split(' ');
            for (var i = 0; i < words.length; i++) {
                var word = words[i].toLowerCase();
                $(layouts).each(function (index, item) {
                    var bc = item.LayoutNumber.toLowerCase();
                    if (i == 0) {
                        if ((bc.indexOf(word) >= 0)) {
                            $("#" + bc).css("display", "");
                        } else {
                            $("#" + bc).css("display", "none");
                        }
                    } else {
                        if ($("#" + bc).css("display") != "none") {
                            if ((bc.indexOf(word) >= 0)) {
                                $("#" + bc).css("display", "");
                            } else {
                                $("#" + bc).css("display", "none");
                            }
                        }
                    }
                });
            }
        }

    </script>
}