@model IndexLayoutModel
@{
    ViewData["Title"] = "Lavorazioni";
}
<h2>Lavorazioni</h2>
<div class="content_page margin_bottom">
    <div style="margin-bottom: 15px; text-align: right;">
        <label for="searchBar" style="width: 60px;">Cerca:</label>
        <input type="text" id="txtSearch" value="" style="margin: 0 !important; width: 200px;" placeholder="Numero, Data, Articolo" onkeyup="filterSearch(event)" autocomplete="off" />
    </div>
    <table class="table">
        <tr>
            <td style="font-weight:bold; width:130px;">Numero</td>
            <td style="font-weight:bold; width:55px;">Stato</td>
            <td style="font-weight:bold; width:100px;">Data</td>
            <td style="font-weight:bold; width:90px;">Articolo</td>
            <td style="font-weight:bold; width:180px;">Descr. Articolo</td>
            <td style="font-weight:bold; width:60px;">Metri</td>
            <td style="font-weight:bold; width:80px;">Quantità</td>
            <td style="font-weight:bold; width:65px;">Logs</td>
            <td style="font-weight:bold; width:140px;">Azioni</td>
        </tr>
        @foreach (var l in Model.Layouts)
        {
            var machine = Model.Machines.Where(m => m.Id == l.Machine).FirstOrDefault();
            <tr id="@l.LayoutNumber" style="font-size: 12px;">
                <td style="font-weight:bold; vertical-align: middle; padding-left:20px;">@l.LayoutNumber</td>
                <td style="text-align:center; vertical-align: middle;">
                    <span id="l_@l.LayoutNumber" class="led @Enum.GetName(typeof(Status), l.Status)" title="@l.Status" style="top: 2px;position: relative;"></span>
                </td>
                <td style="vertical-align: middle;">@l.StartTimestamp.ToString("dd/MM/yyyy")</td>
                <td style="vertical-align: middle;">@(l.ItemCode.ToString() ?? "--")</td>
                <td style="vertical-align: middle;">@(l.ItemDescription ?? "--")</td>
                <td style="vertical-align: middle;">@(l.Meters.ToString() ?? "--")</td>
                <td style="vertical-align: middle;">@(l.Quantity.ToString() ?? "--")</td>
                <td style="vertical-align: middle; text-align:center; font-weight:bold;">
                    <span id="c_@l.LayoutNumber">@((l.LayoutActRecords)?.Count.ToString() ?? "0")</span>
                </td>
                <td class="buttons" style="vertical-align: middle; text-align: right; padding-right:20px;">
                    <a asp-if="@(l.Status == Status.Finished || l.Status == Status.Stopped)" asp-action="Report" asp-controller="Layout" asp-route-id="@l.Id" class="reportButton" target="_blank" style="@((l.Status == Status.Finished || l.Status == Status.Stopped) ? "" : "display:none;")">REPORT</a>
                    <a asp-if="@(l.Status == Status.Waiting && machine != null && machine.GetStatus() == MachineStatus.Online)" asp-action="SendLayout" asp-controller="Layout" asp-route-id="@l.Id" onclick="return openWriteModalityDialog(this);" class="startButton" title="Avvia la lavorazione">AVVIA</a>
                    <a asp-if="@(l.Status == Status.Recording)" asp-action="Stop" asp-controller="Layout" asp-route-id="@l.Id" class="confirmDialog stopButton" data-msg="Confermi di voler interrompere la disposizione N. @l.LayoutNumber ?" data-title="Conferma Arresto" title="Ferma la lavorazione">FERMA</a>
                </td>
            </tr>
        }
        <tr asp-if="@(Model.Layouts.Count == 0)">
            <td colspan="8" style="text-align:center;">Nessuna Lavorazione presente.</td>
        </tr>
    </table>
</div>

<div style="display:none;">
    <form asp-antiforgery="true" id="dialogWriteModality" autocomplete="off">
        <label>Desideri inviare dei parametri in macchina?</label>
        <br />
        <label for="writeNull" style="width: 65px;margin-left: 30px;">Nessuno</label>
        <input type="radio" value="nothing" id="writeNull" name="writeModality" checked="checked" style="top: 7px;position: relative;" />
        <br />
        <label for="writeRecipe" style="width: 65px;margin-left: 30px;">Ricetta</label>
        <input type="radio" value="recipe" id="writeRecipe" name="writeModality" style="top: 7px;position: relative;" />
        <br />
        <label for="writeManual" style="width: 65px;margin-left: 30px;">Manuale</label>
        <input type="radio" value="manual" id="writeManual" name="writeModality" style="top: 7px;position: relative;" />
    </form>
</div>

<div style="display:none">
    <form asp-antiforgery="true" autocomplete="off" id="dialogWriteManual">
        <input type="hidden" value="manual" name="writeModality" />
        @foreach (var f in Model.Machines[0].GetParametersWrite())
        {
            var val = f.Value[0];
            double step = 1.0;
            for (int i = 0; i < val.Scaling; i++)
            {
                step = step / 10.0;
            }
            <label style="width:205px;">@f.Key.ToNotMappedAttribute().ToWhiteSpaceInsert()</label>
            <input type="number" step="@step.ToString().Replace(",", ".")" value="0" min="0" name="writeFields[@f.Key]" title="@val.Description" style="width:180px;" class="field" />
            <br />
        }
    </form>
</div>

<div style="display:none">
    <form asp-antiforgery="true" autocomplete="off" id="dialogWriteRecipe">
        <input type="hidden" value="recipe" name="writeModality" />
        <label for="selRecipe" style="width: 70px;margin-left: 20px;">Ricetta:</label>
        <select id="selRecipe" name="recipe">
            <option value="">--</option>
            @foreach (var r in Model.Recipes)
            {
                <option value="@r.Id">@(r.Name)</option>
            }
        </select>
    </form>
</div>

@section Scripts{
    @await Html.PartialAsync("_ValidationScriptsPartial")
    <script class="inject-json" data-name="layouts" type="application/json">
        @Html.Raw(JsonConvert.SerializeObject(Model.Layouts))
    </script>
    <script type="text/javascript">

        var validationMan = $('#dialogWriteManual').validate();
        var validationRec = $('#dialogWriteRecipe').validate();
        validationRec.settings.rules = { 'recipe': { required: true } };
        validationRec.settings.messages = { 'recipe': { required: "" } };

        var timer;
        var TimerVal = 2000;
        $(document).ready(function () {
            recBlink();
            timer = setInterval(updateLogs, TimerVal);

            $(".field").each(function () {
                $(this).rules("add", {
                    required: true,
                    notEqual: "0",
                    messages: {
                        required: "",
                        notEqual: ""
                    }
                });
            });
        });

        function updateLogs() {
            $.getJSON("/Api/RealtimeLayouts").done(function (data) {
                $.each(data, function (bc, it) {
                    $("#l_" + bc).removeAttr("class");
                    $("#l_" + bc).attr("class", "led " + it.status);
                    $("#l_" + bc).attr("title", it.status);
                    $("#c_" + bc).html(it.logs);
                    if (it.status == "@Enum.GetName(typeof(Status), Status.Finished)") {
                        $("#" + bc + " .stopButton").remove();
                        $("#" + bc + " .reportButton").css("display", "inline-block");
                    }
                });
            }).fail(function (data) {

            });
        }

        function recBlink() {
            setTimeout(function () {
                var op = $(".Recording").css("opacity");
                if (op == "0")
                    $(".Recording").css("opacity", "1");
                else
                    $(".Recording").css("opacity", "0");
                recBlink();
            }, 1000);
        }

        function filterSearch(e) {
            var val = e.currentTarget.value;
            var words = val.split(' ');
            for (var i = 0; i < words.length; i++) {
                var word = words[i].toLowerCase();
                $(layouts).each(function (index, item) {
                    var bc = item.LayoutNumber.toString();
                    var data = new Date(item.StartTimestamp.toString());
                    data = data.format("dd/mm/yyyy");
                    var art = item.ItemCode.toString();
                    if (i == 0) {
                        if ((bc.indexOf(word) >= 0) || (data.indexOf(word) >= 0) || (art.indexOf(word) >= 0)) {
                            $("#" + bc).css("display", "");
                        } else {
                            $("#" + bc).css("display", "none");
                        }
                    } else {
                        if ($("#" + bc).css("display") != "none") {
                            if ((bc.indexOf(word) >= 0) || (data.indexOf(word) >= 0) || (art.indexOf(word) >= 0)) {
                                $("#" + bc).css("display", "");
                            } else {
                                $("#" + bc).css("display", "none");
                            }
                        }
                    }
                });
            }
        }

        function openWriteModalityDialog(it) {
            $("#writeNull").prop("checked", true);         
            var href = $(it).attr("href");
            $("#dialogWriteModality").attr("action", href);
            $("#dialogWriteModality").dialog("open");
            return false;
        }

        $("#dialogWriteModality").dialog({
            autoOpen: false,
            title: "Invia Disposizione",
            resizable: false,
            draggable: false,
            height: "auto",
            width: 400,
            modal: true,
            create: function (event) {
                $(event.target).parent().css({ 'position': 'fixed' });
            },
            buttons: {
                "Conferma": function () {
                    var valS = $("input[name='writeModality']:checked").val();
                    if (valS == "manual") {
                        $('#dialogWriteManual').trigger("reset");
                        $('#dialogWriteManual input, #dialogWriteManual select, #dialogWriteManual label').removeClass("error");
                        window.validationMan.resetForm();
                        $("#dialogWriteManual").attr("action", $(this).attr("action"));
                        $("#dialogWriteManual").dialog("open");
                    } else if (valS == "recipe") {
                        $('#dialogWriteRecipe').trigger("reset");
                        $('#dialogWriteRecipe input, #dialogWriteRecipe select, #dialogWriteRecipe label').removeClass("error");
                        window.validationRec.resetForm();
                        $("#dialogWriteRecipe").attr("action", $(this).attr("action"));
                        $("#dialogWriteRecipe").dialog("open");
                    } else {
                        $(this).submit();
                    }
                    $(this).dialog("close");
                },
                "Annulla": function () {
                    $(this).dialog("close");
                }
            }
        });


        $("#dialogWriteManual").dialog({
            autoOpen: false,
            title: "Inserisci impostazioni manuali",
            resizable: false,
            draggable: false,
            height: "auto",
            width: 430,
            modal: true,
            create: function (event) {
                $(event.target).parent().css({ 'position': 'fixed' });
            },
            buttons: {
                "Conferma": function () {
                    $("#dialogWriteManual").submit();
                },
                "Annulla": function () {
                    $(this).dialog("close");
                }
            }
        });

        $("#dialogWriteRecipe").dialog({
            autoOpen: false,
            title: "Seleziona una ricetta",
            resizable: false,
            draggable: false,
            height: "auto",
            width: 430,
            modal: true,
            create: function (event) {
                $(event.target).parent().css({ 'position': 'fixed' });
            },
            buttons: {
                "Conferma": function () {
                    $("#dialogWriteRecipe").submit();
                },
                "Annulla": function () {
                    $(this).dialog("close");
                }
            }
        });

    </script>
}